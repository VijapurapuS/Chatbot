import os,sys
import pandas as pd
sys.path.append(os.path.normpath(os.getcwd()))

import warnings
warnings.filterwarnings("ignore")

metadata = pd.read_csv('~/Downloads/Movie_Bot/data/metadata_prep.csv')

from sklearn.feature_extraction.text import TfidfVectorizer

#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'
tfidf = TfidfVectorizer(stop_words='english')

#Replace NaN with an empty string
metadata['overview'] = metadata['overview'].fillna('')

#Construct the required TF-IDF matrix by fitting and transforming the data
tfidf_matrix = tfidf.fit_transform(metadata['overview'])

#Output the shape of tfidf_matrix
tfidf_matrix.shape


from sklearn.metrics.pairwise import linear_kernel

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)



def get_recommendations(title, df, indices, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = indices[title]

    # Get the pairwsie similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 3 most similar movies
    sim_scores = sim_scores[1:4]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 3 most similar movies
    return df['title'].iloc[movie_indices]


indices = pd.Series(metadata.index, index=metadata['title']).drop_duplicates()


%%timeit
get_recommendations('Toy Story 2', metadata, indices, cosine_sim)

a = get_recommendations('Toy Story 2', metadata, indices, cosine_sim)

metadata.loc[a.index]['imdbURL']


metadata.loc[a.index]['ImageURL']

